#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shx = undefined;

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _help = require('./help');

var _help2 = _interopRequireDefault(_help);

var _config = require('./config');

var _printCmdRet = require('./printCmdRet');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

_shelljs2.default.help = _help2.default;

var shx = exports.shx = function shx(argv) {
  var parsedArgs = (0, _minimist2.default)(argv.slice(2), { stopEarly: true, boolean: true });

  var _parsedArgs$_ = _toArray(parsedArgs._);

  var fnName = _parsedArgs$_[0];

  var args = _parsedArgs$_.slice(1);

  if (!fnName) {
    console.error('Error: Missing ShellJS command name');
    console.error((0, _help2.default)());
    return _config.EXIT_CODES.SHX_ERROR;
  }

  // validate command
  if (typeof _shelljs2.default[fnName] !== 'function') {
    console.error('Error: Invalid ShellJS command: ' + fnName + '.');
    console.error((0, _help2.default)());
    return _config.EXIT_CODES.SHX_ERROR;
  } else if (_config.CMD_BLACKLIST.indexOf(fnName) > -1) {
    console.error('Warning: shx ' + fnName + ' is not supported');
    console.error('Please run `shx help` for a list of commands.');
    return _config.EXIT_CODES.SHX_ERROR;
  }

  // Set shell.config with parsed options
  Object.assign(_shelljs2.default.config, parsedArgs);

  // Workaround for sed syntax
  var newArgs = void 0;
  var ret = void 0;
  if (fnName === 'sed') {
    (function () {
      newArgs = [];
      var lookingForSubstString = true;
      args.forEach(function (arg) {
        var match = arg.match(/^s\/(.*[^\\])\/(.*[^\\])\/(g?)$/);
        if (match && lookingForSubstString) {
          var regexString = match[1].replace(/\\\//g, '/');
          var replacement = match[2].replace(/\\\//g, '/').replace(/\\./g, '.');
          var regexFlags = match[3];
          newArgs.push(new RegExp(regexString, regexFlags));
          newArgs.push(replacement);
          lookingForSubstString = false;
        } else {
          newArgs.push(arg);
        }
      });
      ret = _shelljs2.default[fnName].apply(_shelljs2.default, _toConsumableArray(newArgs));
    })();
  } else {
    ret = _shelljs2.default[fnName].apply(_shelljs2.default, _toConsumableArray(args));
  }
  if (ret === null) ret = _shelljs2.default.ShellString('', '', 1);
  var code = ret.hasOwnProperty('code') && ret.code;

  if ((fnName === 'pwd' || fnName === 'which') && !ret.endsWith('\n') && ret.length > 1) ret += '\n';

  // echo already prints
  if (fnName !== 'echo') (0, _printCmdRet.printCmdRet)(ret);
  if (typeof ret === 'boolean') code = ret ? 0 : 1;

  if (typeof code === 'number') {
    return code;
  } else if (_shelljs2.default.error()) {
    return _config.EXIT_CODES.CMD_FAILED;
  }

  return _config.EXIT_CODES.SUCCESS;
};